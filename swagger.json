{
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "schemes": [
    "http",
    "https"
  ],
  "swagger": "2.0",
  "info": {
    "description": "API to fetch movie data from a repository.\nThe movie data are not meant to be accurate and were generated with https://mockaroo.com/\nSource: https://github.com/rhodeon/moviescreen",
    "title": "moviescreen",
    "contact": {
      "name": "Ruona Onobrakpeya",
      "email": "rhodeondev@gmail.com"
    },
    "version": "1.0.0"
  },
  "host": "localhost:4000",
  "basePath": "/v1",
  "paths": {
    "/healthcheck": {
      "get": {
        "tags": [
          "Misc"
        ],
        "summary": "API status.",
        "operationId": "healthcheck",
        "responses": {
          "200": {
            "$ref": "#/responses/healthcheckResponse"
          }
        }
      }
    },
    "/movies/": {
      "get": {
        "description": "Returns a list of movies satisfying the query parameters.",
        "tags": [
          "Movies"
        ],
        "summary": "List movies.",
        "operationId": "listMovies",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "Title",
            "description": "Movie title (partial or complete).",
            "name": "title",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": "genres=action,comedy",
            "x-go-name": "Genres",
            "description": "Comma-separated list of movie genres.",
            "name": "genres",
            "in": "query"
          },
          {
            "minimum": 1,
            "type": "integer",
            "format": "int64",
            "x-go-name": "Page",
            "description": "Page number.",
            "name": "page",
            "in": "query"
          },
          {
            "maximum": 100,
            "minimum": 1,
            "type": "integer",
            "format": "int64",
            "x-go-name": "Limit",
            "description": "Number of movies per page.",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "string",
            "x-go-name": "Sort",
            "description": "Possible values: id | title | year | runtime\nSort values can be prefixed with a \"-\" to denote descending order.",
            "name": "sort",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/moviesResponse"
          },
          "401": {
            "$ref": "#/responses/unauthenticatedError"
          },
          "422": {
            "$ref": "#/responses/validationError"
          }
        }
      },
      "post": {
        "description": "Creates a movie with the given data in the request body.\nAll fields in the request body are required.\nRequires a user with the \"movies:write\" permission.",
        "tags": [
          "Movies"
        ],
        "summary": "Create movie.",
        "operationId": "createMovie",
        "parameters": [
          {
            "name": "Body",
            "in": "body",
            "schema": {
              "type": "object",
              "properties": {
                "genres": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "x-go-name": "Genres",
                  "example": [
                    "action",
                    "western"
                  ]
                },
                "runtime": {
                  "description": "Movie runtime in minutes",
                  "type": "integer",
                  "format": "int64",
                  "x-go-name": "Runtime",
                  "example": 200
                },
                "title": {
                  "type": "string",
                  "x-go-name": "Title",
                  "example": "For a Few Dollars More"
                },
                "year": {
                  "type": "integer",
                  "format": "int64",
                  "x-go-name": "Year",
                  "example": 1968
                }
              }
            }
          }
        ],
        "responses": {
          "201": {
            "$ref": "#/responses/movieResponse"
          },
          "400": {
            "$ref": "#/responses/badRequestError"
          },
          "401": {
            "$ref": "#/responses/unauthenticatedError"
          },
          "403": {
            "$ref": "#/responses/permissionError"
          },
          "422": {
            "$ref": "#/responses/validationError"
          }
        }
      }
    },
    "/movies/{id}": {
      "get": {
        "description": "Returns the details of the movie with the given id.",
        "tags": [
          "Movies"
        ],
        "summary": "Get movie.",
        "operationId": "getMovie",
        "parameters": [
          {
            "type": "integer",
            "format": "int64",
            "x-go-name": "Id",
            "description": "Movie ID.",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/movieResponse"
          },
          "401": {
            "$ref": "#/responses/unauthenticatedError"
          },
          "404": {
            "$ref": "#/responses/notFoundError"
          }
        }
      },
      "delete": {
        "description": "Deletes the movie with the given id.\nRequires a user with the \"movies:write\" permission.",
        "tags": [
          "Movies"
        ],
        "summary": "Delete movie.",
        "operationId": "deleteMovie",
        "parameters": [
          {
            "type": "integer",
            "format": "int64",
            "x-go-name": "Id",
            "description": "Movie ID.",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/emptyResponse"
          },
          "401": {
            "$ref": "#/responses/unauthenticatedError"
          },
          "403": {
            "$ref": "#/responses/permissionError"
          },
          "404": {
            "$ref": "#/responses/notFoundError"
          }
        }
      },
      "patch": {
        "description": "Updates the details of the movie with the given id with those in the request body.\nFields in the request body are optional.\nRequires a user with the \"movies:write\" permission.",
        "tags": [
          "Movies"
        ],
        "summary": "Update movie.",
        "operationId": "updateMovie",
        "parameters": [
          {
            "type": "integer",
            "format": "int64",
            "x-go-name": "Id",
            "description": "Movie ID.",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "name": "Body",
            "in": "body",
            "schema": {
              "type": "object",
              "properties": {
                "genres": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "x-go-name": "Genres",
                  "example": [
                    "action",
                    "western"
                  ]
                },
                "runtime": {
                  "description": "Movie runtime in minutes",
                  "type": "integer",
                  "format": "int64",
                  "x-go-name": "Runtime",
                  "example": 200
                },
                "title": {
                  "type": "string",
                  "x-go-name": "Title",
                  "example": "For a Few Dollars More"
                },
                "year": {
                  "type": "integer",
                  "format": "int64",
                  "x-go-name": "Year",
                  "example": 1968
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/movieResponse"
          },
          "400": {
            "$ref": "#/responses/badRequestError"
          },
          "401": {
            "$ref": "#/responses/unauthenticatedError"
          },
          "403": {
            "$ref": "#/responses/permissionError"
          },
          "404": {
            "$ref": "#/responses/notFoundError"
          },
          "409": {
            "$ref": "#/responses/editConflictError"
          },
          "422": {
            "$ref": "#/responses/validationError"
          }
        }
      }
    },
    "/users/": {
      "post": {
        "description": "Registers a new user with the \"movies:read\" permission granted by default.\nA mail is also sent to the user containing an account activation token with a lifetime of 48 hours.\nAll fields in the request body are required.",
        "tags": [
          "Users"
        ],
        "summary": "Register user.",
        "operationId": "registerUser",
        "parameters": [
          {
            "name": "Body",
            "in": "body",
            "schema": {
              "type": "object",
              "required": [
                "username",
                "email",
                "password"
              ],
              "properties": {
                "email": {
                  "type": "string",
                  "x-go-name": "Email",
                  "example": "johndoe@mail.com"
                },
                "password": {
                  "type": "string",
                  "x-go-name": "Password",
                  "example": "password"
                },
                "username": {
                  "type": "string",
                  "x-go-name": "Username",
                  "example": "johndoe"
                }
              }
            }
          }
        ],
        "responses": {
          "201": {
            "$ref": "#/responses/registerUserResponse"
          },
          "422": {
            "$ref": "#/responses/validationError"
          }
        }
      }
    },
    "/users/activate": {
      "put": {
        "description": "Activates a user, allowing them to be authenticated and make requests to the movies endpoints.\nAll fields in the request body are required.",
        "tags": [
          "Users"
        ],
        "summary": "Activate user.",
        "operationId": "activateUser",
        "parameters": [
          {
            "name": "Body",
            "in": "body",
            "schema": {
              "type": "object",
              "required": [
                "token"
              ],
              "properties": {
                "token": {
                  "type": "string",
                  "x-go-name": "Token",
                  "example": "OTBJEQX2EUIMKZHAMEMIPHE6TQ"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/activateUserResponse"
          },
          "409": {
            "$ref": "#/responses/editConflictError"
          },
          "422": {
            "$ref": "#/responses/validationError"
          }
        }
      }
    },
    "/users/authenticate": {
      "post": {
        "description": "Returns a user-associated bearer token with a lifetime of 24 hours.\nAll fields in the request body are required.",
        "tags": [
          "Users"
        ],
        "summary": "Authenticate user.",
        "operationId": "authenticateUser",
        "parameters": [
          {
            "name": "Body",
            "in": "body",
            "schema": {
              "type": "object",
              "required": [
                "email",
                "password"
              ],
              "properties": {
                "email": {
                  "type": "string",
                  "x-go-name": "Email",
                  "example": "johndoe@mail.com"
                },
                "password": {
                  "type": "string",
                  "x-go-name": "Password",
                  "example": "password"
                }
              }
            }
          }
        ],
        "responses": {
          "201": {
            "$ref": "#/responses/authenticateUserResponse"
          },
          "401": {
            "$ref": "#/responses/invalidCredentialsError"
          },
          "403": {
            "$ref": "#/responses/unactivatedUserError"
          },
          "422": {
            "$ref": "#/responses/validationError"
          }
        }
      }
    },
    "/users/password-reset-token": {
      "post": {
        "description": "Sends a mail to the user containing a password reset token with a lifetime of 15 minutes.\nAll fields in the request body are required.",
        "tags": [
          "Users"
        ],
        "summary": "Password reset token.",
        "operationId": "passwordResetToken",
        "parameters": [
          {
            "name": "Body",
            "in": "body",
            "schema": {
              "type": "object",
              "required": [
                "email"
              ],
              "properties": {
                "email": {
                  "type": "string",
                  "x-go-name": "Email",
                  "example": "johndoe@mail.com"
                }
              }
            }
          }
        ],
        "responses": {
          "202": {
            "$ref": "#/responses/passwordResetTokenResponse"
          },
          "403": {
            "$ref": "#/responses/unactivatedUserError"
          },
          "422": {
            "$ref": "#/responses/validationError"
          }
        }
      }
    },
    "/users/refresh-activation-token": {
      "post": {
        "description": "Sends a mail to the user containing an updated activation token.\nAllowed only for unactivated users.\nAll fields in the request body are required.",
        "tags": [
          "Users"
        ],
        "summary": "Password reset token.",
        "operationId": "refreshActivationToken",
        "parameters": [
          {
            "name": "Body",
            "in": "body",
            "schema": {
              "type": "object",
              "required": [
                "email",
                "password"
              ],
              "properties": {
                "email": {
                  "type": "string",
                  "x-go-name": "Email",
                  "example": "johndoe@mail.com"
                },
                "password": {
                  "type": "string",
                  "x-go-name": "Password",
                  "example": "password"
                }
              }
            }
          }
        ],
        "responses": {
          "202": {
            "$ref": "#/responses/refreshActivationTokenResponse"
          },
          "401": {
            "$ref": "#/responses/invalidCredentialsError"
          },
          "403": {
            "$ref": "#/responses/alreadyActivateUserError"
          },
          "422": {
            "$ref": "#/responses/validationError"
          }
        }
      }
    },
    "/users/update-password": {
      "put": {
        "description": "Updates the user password.\nAll fields in the request body are required.",
        "tags": [
          "Users"
        ],
        "summary": "Update password.",
        "operationId": "updatePassword",
        "parameters": [
          {
            "name": "Body",
            "in": "body",
            "schema": {
              "type": "object",
              "required": [
                "password",
                "token"
              ],
              "properties": {
                "password": {
                  "type": "string",
                  "x-go-name": "Password",
                  "example": "password"
                },
                "token": {
                  "type": "string",
                  "x-go-name": "Token",
                  "example": "OTBJEQX2EUIMKZHAMEMIPHE6TQ"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/updatePasswordResponse"
          },
          "409": {
            "$ref": "#/responses/editConflictError"
          },
          "422": {
            "$ref": "#/responses/validationError"
          }
        }
      }
    }
  },
  "definitions": {
    "baseResponse": {
      "description": "This is the root object returned from the API.\nIt wraps the success data or error along with their status codes and metadata (if applicable).\nAll response examples are in actuality nested in this object, with success being in `data` and errors in `errors`.",
      "type": "object",
      "title": "baseResponse",
      "properties": {
        "Body": {
          "description": "in: body",
          "type": "object",
          "required": [
            "success",
            "status"
          ],
          "properties": {
            "data": {
              "description": "Data of a success response.\nIt is mutually exclusive to the `error`.",
              "type": "object",
              "x-go-name": "Data"
            },
            "error": {
              "description": "Data of an error response.\nIt is mutually exclusive to the `data`.",
              "type": "object",
              "required": [
                "type",
                "data"
              ],
              "properties": {
                "data": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "string"
                  },
                  "x-go-name": "Data"
                },
                "type": {
                  "type": "string",
                  "x-go-name": "Type"
                }
              },
              "x-go-name": "Error"
            },
            "metadata": {
              "description": "Metadata of response.\nIt is only present with paginated results.",
              "type": "object",
              "properties": {
                "current_page": {
                  "type": "integer",
                  "format": "int64",
                  "x-go-name": "CurrentPage"
                },
                "last_page": {
                  "type": "integer",
                  "format": "int64",
                  "x-go-name": "LastPage"
                },
                "page_limit": {
                  "type": "integer",
                  "format": "int64",
                  "x-go-name": "PageLimit"
                },
                "total_records": {
                  "type": "integer",
                  "format": "int64",
                  "x-go-name": "TotalRecords"
                }
              },
              "x-go-name": "Metadata"
            },
            "status": {
              "description": "Status code of the response",
              "type": "integer",
              "format": "int64",
              "x-go-name": "Status"
            },
            "success": {
              "description": "True on a successful request, and false on an error",
              "type": "boolean",
              "x-go-name": "Success"
            }
          }
        }
      },
      "x-go-name": "baseModel",
      "x-go-package": "github.com/rhodeon/moviescreen/cmd/api/docs"
    },
    "movie": {
      "type": "object",
      "properties": {
        "genres": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "Genres",
          "example": [
            "adventure",
            "fantasy"
          ]
        },
        "id": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Id",
          "example": 1
        },
        "runtime": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Runtime",
          "example": 124
        },
        "title": {
          "type": "string",
          "x-go-name": "Title",
          "example": "Harry Potter and the Philosopher's Stone"
        },
        "version": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Version",
          "example": 1
        },
        "year": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Year",
          "example": 2001
        }
      },
      "x-go-name": "movieResponse",
      "x-go-package": "github.com/rhodeon/moviescreen/cmd/api/docs"
    },
    "token": {
      "type": "object",
      "properties": {
        "expires": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "Expires"
        },
        "token": {
          "type": "string",
          "x-go-name": "PlainText",
          "example": "OTBJEQX2EUIMKZHAMEMIPHE6TQ"
        }
      },
      "x-go-name": "tokenResponse",
      "x-go-package": "github.com/rhodeon/moviescreen/cmd/api/docs"
    },
    "user": {
      "type": "object",
      "properties": {
        "activated": {
          "type": "boolean",
          "x-go-name": "Activated",
          "example": true
        },
        "created": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "Created"
        },
        "email": {
          "type": "string",
          "x-go-name": "Email",
          "example": "johndoe@mail.com"
        },
        "id": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Id",
          "example": 1
        },
        "username": {
          "type": "string",
          "x-go-name": "Username",
          "example": "johndoe"
        },
        "version": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Version",
          "example": 1
        }
      },
      "x-go-name": "userResponse",
      "x-go-package": "github.com/rhodeon/moviescreen/cmd/api/docs"
    }
  },
  "responses": {
    "activateUserResponse": {
      "description": "",
      "schema": {
        "type": "object",
        "properties": {
          "activated": {
            "type": "boolean",
            "x-go-name": "Activated",
            "example": true
          },
          "created": {
            "type": "string",
            "format": "date-time",
            "x-go-name": "Created"
          },
          "email": {
            "type": "string",
            "x-go-name": "Email",
            "example": "johndoe@mail.com"
          },
          "id": {
            "type": "integer",
            "format": "int64",
            "x-go-name": "Id",
            "example": 1
          },
          "username": {
            "type": "string",
            "x-go-name": "Username",
            "example": "johndoe"
          },
          "version": {
            "type": "integer",
            "format": "int64",
            "x-go-name": "Version",
            "example": 2
          }
        }
      }
    },
    "alreadyActivateUserError": {
      "description": "An alreadyActivateUserError is returned when an activation request is made for an already activated account.",
      "schema": {
        "type": "object",
        "required": [
          "type",
          "data"
        ],
        "properties": {
          "data": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "x-go-name": "Data",
            "example": {
              "message": "your account must be activated to access this resource"
            }
          },
          "type": {
            "type": "string",
            "x-go-name": "Type",
            "example": "generic"
          }
        }
      }
    },
    "authenticateUserResponse": {
      "description": "",
      "schema": {
        "type": "object",
        "properties": {
          "expires": {
            "type": "string",
            "format": "date-time",
            "x-go-name": "Expires"
          },
          "token": {
            "type": "string",
            "x-go-name": "PlainText",
            "example": "OTBJEQX2EUIMKZHAMEMIPHE6TQ"
          }
        }
      }
    },
    "badRequestError": {
      "description": "A BadRequestError is returned when the request body contains unparsable data.",
      "schema": {
        "type": "object",
        "required": [
          "type",
          "data"
        ],
        "properties": {
          "data": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "x-go-name": "Data",
            "example": {
              "message": "body contains malformed JSON"
            }
          },
          "type": {
            "type": "string",
            "x-go-name": "Type",
            "example": "generic"
          }
        }
      }
    },
    "editConflictError": {
      "description": "",
      "schema": {
        "type": "object",
        "required": [
          "type",
          "data"
        ],
        "properties": {
          "data": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "x-go-name": "Data",
            "example": {
              "message": "unable to update the record due to an edit conflict, please try again"
            }
          },
          "type": {
            "type": "string",
            "x-go-name": "Type",
            "example": "generic"
          }
        }
      }
    },
    "emptyResponse": {
      "description": "",
      "schema": {
        "type": "object"
      }
    },
    "healthcheckResponse": {
      "description": "",
      "schema": {
        "type": "object",
        "properties": {
          "environment": {
            "type": "string",
            "x-go-name": "Environment",
            "example": "production"
          },
          "status": {
            "type": "string",
            "x-go-name": "Status",
            "example": "available"
          },
          "version": {
            "type": "string",
            "x-go-name": "Version",
            "example": "v1.0.0"
          }
        }
      }
    },
    "invalidCredentialsError": {
      "description": "An InvalidCredentialsError is returned when the email and password in the request do not match or exist.",
      "schema": {
        "type": "object",
        "required": [
          "type",
          "data"
        ],
        "properties": {
          "data": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "x-go-name": "Data",
            "example": {
              "message": "invalid user credentials"
            }
          },
          "type": {
            "type": "string",
            "x-go-name": "Type",
            "example": "generic"
          }
        }
      }
    },
    "movieResponse": {
      "description": "",
      "schema": {
        "type": "object",
        "properties": {
          "genres": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "x-go-name": "Genres",
            "example": [
              "adventure",
              "fantasy"
            ]
          },
          "id": {
            "type": "integer",
            "format": "int64",
            "x-go-name": "Id",
            "example": 1
          },
          "runtime": {
            "type": "integer",
            "format": "int64",
            "x-go-name": "Runtime",
            "example": 124
          },
          "title": {
            "type": "string",
            "x-go-name": "Title",
            "example": "Harry Potter and the Philosopher's Stone"
          },
          "version": {
            "type": "integer",
            "format": "int64",
            "x-go-name": "Version",
            "example": 1
          },
          "year": {
            "type": "integer",
            "format": "int64",
            "x-go-name": "Year",
            "example": 2001
          }
        }
      }
    },
    "moviesResponse": {
      "description": "",
      "schema": {
        "type": "array",
        "items": {
          "$ref": "#/definitions/movie"
        }
      }
    },
    "notFoundError": {
      "description": "",
      "schema": {
        "type": "object",
        "required": [
          "type",
          "data"
        ],
        "properties": {
          "data": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "x-go-name": "Data",
            "example": {
              "message": "resource not found"
            }
          },
          "type": {
            "type": "string",
            "x-go-name": "Type",
            "example": "generic"
          }
        }
      }
    },
    "passwordResetTokenResponse": {
      "description": "",
      "schema": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "x-go-name": "Message",
            "example": "an email will be sent to you containing password reset instructions"
          }
        }
      }
    },
    "permissionError": {
      "description": "An PermissionError is returned when the user has insufficient permissions to carry out the request.",
      "schema": {
        "type": "object",
        "required": [
          "type",
          "data"
        ],
        "properties": {
          "data": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "x-go-name": "Data",
            "example": {
              "message": "your account doesn't have the necessary permissions to access this resource"
            }
          },
          "type": {
            "type": "string",
            "x-go-name": "Type",
            "example": "generic"
          }
        }
      }
    },
    "refreshActivationTokenResponse": {
      "description": "",
      "schema": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "x-go-name": "Message",
            "example": "an email will be sent to you containing activation instructions"
          }
        }
      }
    },
    "registerUserResponse": {
      "description": "",
      "schema": {
        "type": "object",
        "properties": {
          "activated": {
            "type": "boolean",
            "x-go-name": "Activated",
            "example": false
          },
          "created": {
            "type": "string",
            "format": "date-time",
            "x-go-name": "Created"
          },
          "email": {
            "type": "string",
            "x-go-name": "Email",
            "example": "johndoe@mail.com"
          },
          "id": {
            "type": "integer",
            "format": "int64",
            "x-go-name": "Id",
            "example": 1
          },
          "username": {
            "type": "string",
            "x-go-name": "Username",
            "example": "johndoe"
          },
          "version": {
            "type": "integer",
            "format": "int64",
            "x-go-name": "Version",
            "example": 1
          }
        }
      }
    },
    "unactivatedUserError": {
      "description": "An unactivatedUserError is returned when the request is made by an unactivated user.",
      "schema": {
        "type": "object",
        "required": [
          "type",
          "data"
        ],
        "properties": {
          "data": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "x-go-name": "Data",
            "example": {
              "message": "your account must be activated to access this resource"
            }
          },
          "type": {
            "type": "string",
            "x-go-name": "Type",
            "example": "generic"
          }
        }
      }
    },
    "unauthenticatedError": {
      "description": "An UnauthenticatedError is returned when the request is made by an anonymous user to an endpoint that requires a valid user.",
      "schema": {
        "type": "object",
        "required": [
          "type",
          "data"
        ],
        "properties": {
          "data": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "x-go-name": "Data",
            "example": {
              "message": "you must be authenticated to access this resource"
            }
          },
          "type": {
            "type": "string",
            "x-go-name": "Type",
            "example": "generic"
          }
        }
      }
    },
    "updatePasswordResponse": {
      "description": "",
      "schema": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "x-go-name": "Message",
            "example": "your password was successfully reset"
          }
        }
      }
    },
    "validationError": {
      "description": "A ValidationError is returned when the required input fails validation.",
      "schema": {
        "type": "object",
        "required": [
          "type",
          "data"
        ],
        "properties": {
          "data": {
            "description": "Mapping of failed fields to their error messages.",
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "x-go-name": "Data",
            "example": {
              "field1": "error message",
              "field2": "error message"
            }
          },
          "type": {
            "description": "Request type with validation errors.",
            "type": "string",
            "x-go-name": "Type",
            "example": "movie | user"
          }
        }
      }
    }
  },
  "securityDefinitions": {
    "bearer": {
      "type": "apiKey",
      "name": "Authorization",
      "in": "header"
    }
  },
  "security": [
    {
      "bearer": []
    }
  ]
}